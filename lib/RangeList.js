"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=void 0;function _toConsumableArray(a){return _arrayWithoutHoles(a)||_iterableToArray(a)||_unsupportedIterableToArray(a)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArray(a){if("undefined"!=typeof Symbol&&null!=a[Symbol.iterator]||null!=a["@@iterator"])return Array.from(a)}function _arrayWithoutHoles(a){if(Array.isArray(a))return _arrayLikeToArray(a)}function _slicedToArray(a,b){return _arrayWithHoles(a)||_iterableToArrayLimit(a,b)||_unsupportedIterableToArray(a,b)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArrayLimit(a,b){var c=null==a?null:"undefined"!=typeof Symbol&&a[Symbol.iterator]||a["@@iterator"];if(null!=c){var d,e,f=[],g=!0,h=!1;try{for(c=c.call(a);!(g=(d=c.next()).done)&&(f.push(d.value),!(b&&f.length===b));g=!0);}catch(a){h=!0,e=a}finally{try{g||null==c["return"]||c["return"]()}finally{if(h)throw e}}return f}}function _arrayWithHoles(a){if(Array.isArray(a))return a}function _createForOfIteratorHelper(a,b){var c="undefined"!=typeof Symbol&&a[Symbol.iterator]||a["@@iterator"];if(!c){if(Array.isArray(a)||(c=_unsupportedIterableToArray(a))||b&&a&&"number"==typeof a.length){c&&(a=c);var d=0,e=function(){};return{s:e,n:function n(){return d>=a.length?{done:!0}:{done:!1,value:a[d++]}},e:function e(a){throw a},f:e}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var f,g=!0,h=!1;return{s:function s(){c=c.call(a)},n:function n(){var a=c.next();return g=a.done,a},e:function e(a){h=!0,f=a},f:function f(){try{g||null==c["return"]||c["return"]()}finally{if(h)throw f}}}}function _unsupportedIterableToArray(a,b){if(a){if("string"==typeof a)return _arrayLikeToArray(a,b);var c=Object.prototype.toString.call(a).slice(8,-1);return"Object"===c&&a.constructor&&(c=a.constructor.name),"Map"===c||"Set"===c?Array.from(a):"Arguments"===c||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(c)?_arrayLikeToArray(a,b):void 0}}function _arrayLikeToArray(a,b){(null==b||b>a.length)&&(b=a.length);for(var c=0,d=Array(b);c<b;c++)d[c]=a[c];return d}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}var RangeList=/*#__PURE__*/function(){function a(){_classCallCheck(this,a),_defineProperty(this,"rangeList",[]),_defineProperty(this,"cachedPrintString","")}return _createClass(a,[{key:"size",get:function get(){return this.rangeList.length}/**
   *
   * Adds a range to the list. It will merge the ranges overlapped.
   * @param range {[number, number]} tuple of two numbers which indicates beginning and end of range
   */},{key:"add",value:function add(a){this._validate(a),this._insertIntoRangeList(a),this._clearCachedPrintStr()}/**
   * Removes a range from the list.
   * Separate a range if the range to be removed is included in another range in range list.
   * eg. given range list = [[10, 30]], range to be remove is [15, 20],
   * then the return value would be [[10, 15],[20,30]]
   * @param range {[number, number]} tuple of two numbers which indicates beginning and end of range
   */},{key:"remove",value:function remove(a){this._validate(a),this._removeRangeFromList(a),this._clearCachedPrintStr()}/**
   * cached print
   * it prefer cached print string to print if there is no modification to range list
   * when there is add or remove behavior occurs, those behaviors will clear cached print strings
   * and then print method will re-calculate the string to print and store it to cache.
   */},{key:"print",value:function print(){0===this.cachedPrintString.length&&(this.cachedPrintString=this.toString()),console.log(this.cachedPrintString)}},{key:"toString",value:function toString(){var a,b=[],c=_createForOfIteratorHelper(this.rangeList);try{for(c.s();!(a=c.n()).done;){var d=a.value;b.push(this._rangeToString(d))}}catch(a){c.e(a)}finally{c.f()}return b.join(" ")}},{key:"_clearCachedPrintStr",value:function _clearCachedPrintStr(){this.cachedPrintString=""}},{key:"_rangeToString",value:function _rangeToString(a){return"[".concat(a[0],", ").concat(a[1],")")}},{key:"_validate",value:function _validate(a){if(!a||!(a instanceof Array)||2!==a.length)throw new Error("Range can only be pair of numbers.");var b=_slicedToArray(a,2),c=b[0],d=b[1];if("number"!=typeof c||"number"!=typeof d)throw new Error("Element of range should be type of number.");if(c>d)throw new Error("The end value of the range must be equal or larger than the start value")}},{key:"_insertIntoRangeList",value:function _insertIntoRangeList(a){var b=this._findOverlapRanges(a),c=a;0<b.length&&(c=this._mergeRanges(a,b)),this._insertRange(c)}},{key:"_mergeRanges",value:function _mergeRanges(a,b){var e,c=Number.MIN_SAFE_INTEGER,d=Number.MAX_SAFE_INTEGER,f=[].concat(_toConsumableArray(b),[a]),g=d,h=c,i=_createForOfIteratorHelper(f);try{// find the minimum number in the list to be merged.
// and find the maximum number in the list to be merged.
for(i.s();!(e=i.n()).done;){var j=e.value,k=_slicedToArray(j,2),l=k[0],m=k[1];l<g&&(g=l),m>h&&(h=m)}}catch(a){i.e(a)}finally{i.f()}return[g,h]}},{key:"_findOverlapRanges",value:function _findOverlapRanges(a){for(var b=[],c=[],d=0;d<this.rangeList.length;d++){var e=this.rangeList[d],f=_slicedToArray(e,2),g=f[0],h=f[1],j=_slicedToArray(a,2),k=j[0],l=j[1];k<=h&&l>=g&&(b.push(e),c.push(d))}// at the same time, update this.rangeList.
// Since we are going to merge overlap ranges, and re-push them into this.rangeList.
return this.rangeList=this.rangeList.filter(function(a,b){return-1===c.indexOf(b)}),b}},{key:"_removeRangeFromList",value:function _removeRangeFromList(a){var b=this._findOverlapRanges(a),c=[];0<b.length&&(c=this._separateRanges(a,b)),this._insertRanges(c)}},{key:"_separateRanges",value:function _separateRanges(a,b){var c,d=[],e=_createForOfIteratorHelper(b);try{for(e.s();!(c=e.n()).done;){var f=c.value,g=_slicedToArray(f,2),h=g[0],i=g[1],j=_slicedToArray(a,2),k=j[0],l=j[1];k>h&&d.push([h,k]),l<i&&d.push([l,i])}}catch(a){e.e(a)}finally{e.f()}return d}},{key:"_insertRange",value:function _insertRange(a){this.rangeList.push(a),this._sortRangeList()}},{key:"_insertRanges",value:function _insertRanges(a){this.rangeList=[].concat(_toConsumableArray(this.rangeList),_toConsumableArray(a)),this._sortRangeList()}},{key:"_sortRangeList",value:function _sortRangeList(){this.rangeList.sort(function(a,b){return a[0]-b[0]})}}]),a}();exports["default"]=RangeList;